import { useEffect, useCallback } from 'react';
import { useAuthStore } from '@/stores/authStore';
import { PageLoadDetector, isPageReloaded } from '@/utils/pageLoadDetector';

export const useSessionManager = () => {
  const { forceLogout, user } = useAuthStore();

  const autoLogoutOnPageLoad = useCallback(() => {
    console.log('üîç Session manager - Mode d√©connexion d√©sactiv√© temporairement');
    
    // TEMPORAIREMENT D√âSACTIV√â pour corriger le bug d'√©cran blanc
    // La d√©connexion automatique sera r√©impl√©ment√©e de mani√®re moins agressive
    
    // Nettoyer seulement le d√©tecteur de page
    PageLoadDetector.clearLoadId();
  }, [user]);

  const autoLogoutOnVisibilityChange = useCallback(() => {
    // D√âSACTIV√â - Causait l'√©cran blanc
    console.log('üîç Visibility change d√©tect√© - D√©connexion d√©sactiv√©e');
  }, [user]);

  const autoLogoutOnFocus = useCallback(() => {
    // D√âSACTIV√â - Causait l'√©cran blanc
    console.log('üîç Focus d√©tect√© - D√©connexion d√©sactiv√©e');
  }, [user]);

  const autoLogoutOnPageShow = useCallback(() => {
    // D√âSACTIV√â - Causait l'√©cran blanc
    console.log('üîç PageShow d√©tect√© - D√©connexion d√©sactiv√©e');
  }, [user]);

  useEffect(() => {
    // D√©connexion imm√©diate au montage du composant
    autoLogoutOnPageLoad();

    // √âcouter tous les √©v√©nements de retour/focus/visibilit√©
    window.addEventListener('focus', autoLogoutOnFocus);
    window.addEventListener('pageshow', autoLogoutOnPageShow);
    document.addEventListener('visibilitychange', autoLogoutOnVisibilityChange);

    // D√©connexion lors de la fermeture/rechargement de la page
    const handleBeforeUnload = () => {
      if (user) {
        console.log('üö® Page ferm√©e/recharg√©e - nettoyage session');
        // Nettoyer les donn√©es de session
        localStorage.removeItem('oxo-session-id');
        localStorage.removeItem('oxo-session-timestamp');
        localStorage.removeItem('oxo-auth-storage');
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    // Nettoyage
    return () => {
      window.removeEventListener('focus', autoLogoutOnFocus);
      window.removeEventListener('pageshow', autoLogoutOnPageShow);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('visibilitychange', autoLogoutOnVisibilityChange);
    };
  }, [autoLogoutOnPageLoad, autoLogoutOnFocus, autoLogoutOnPageShow, autoLogoutOnVisibilityChange, user]);

  // Fonction pour invalider manuellement toutes les sessions
  const invalidateAllSessions = useCallback(() => {
    localStorage.removeItem('oxo-session-id');
    localStorage.removeItem('oxo-session-timestamp');
    localStorage.removeItem('oxo-auth-storage');
    forceLogout();
    console.log('üßπ Toutes les sessions ont √©t√© invalid√©es manuellement');
  }, [forceLogout]);

  return {
    invalidateAllSessions,
    autoLogoutOnPageLoad
  };
};