import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Search, 
  Filter, 
  Plus, 
  MoreVertical, 
  Edit, 
  Trash2, 
  Eye, 
  MessageCircle,
  Phone,
  CheckCircle,
  X,
  ArrowUpDown,
  Grid,
  List,
  Star
} from 'lucide-react';
import { useAgentStore } from '@/stores/agentStore';
import { useAuthStore } from '@/stores/authStore';
import { LoadingSpinner } from './animations/LoadingSpinner';
import { ExpandableText } from '@/components/ExpandableText';
import { ScrollingCategories } from '@/components/ScrollingCategories';
import { ScrollingTags } from '@/components/animations/ScrollingTags';
import { SearchHelp } from '@/components/SearchHelp';
import type { Agent, Platform, AgentCategory, AgentStatus } from '@/types/agent';

const platformIcons = {
  whatsapp: 'üì±',
  wechat: 'üí¨',
  telegram: '‚úàÔ∏è',
  instagram: 'üì∑',
  tiktok: 'üéµ',
  discord: 'üéÆ',
  signal: 'üîí'
};

const platformColors = {
  whatsapp: 'bg-gradient-to-r from-green-400 to-green-500 text-white',
  wechat: 'bg-gradient-to-r from-green-500 to-green-600 text-white',
  telegram: 'bg-gradient-to-r from-blue-400 to-blue-500 text-white',
  instagram: 'bg-gradient-to-r from-pink-400 to-pink-500 text-white',
  tiktok: 'bg-gradient-to-r from-gray-700 to-gray-800 text-white',
  discord: 'bg-gradient-to-r from-purple-500 to-purple-600 text-white',
  signal: 'bg-gradient-to-r from-indigo-500 to-indigo-600 text-white'
};

const statusColors = {
  active: 'bg-gradient-to-r from-emerald-400 to-emerald-500 text-white',
  inactive: 'bg-gradient-to-r from-gray-400 to-gray-500 text-white',
  suspended: 'bg-gradient-to-r from-red-400 to-red-500 text-white',
  pending: 'bg-gradient-to-r from-amber-400 to-amber-500 text-white'
};

const categoryLabels = {
  electronics: '√âlectronique',
  fashion: 'Mode',
  'home-garden': 'Maison & Jardin',
  beauty: 'Beaut√©',
  sports: 'Sports',
  'books-media': 'Livres & M√©dias',
  automotive: 'Automobile',
  travel: 'Voyage',
  food: 'Alimentation',
  services: 'Services',
  other: 'Autre'
};

interface AgentListProps {
  onEditAgent?: (agent: Agent) => void;
  onCreateAgent?: () => void;
}

export const AgentList: React.FC<AgentListProps> = ({ onEditAgent, onCreateAgent }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);
  const [showAgentDetail, setShowAgentDetail] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState<'name' | 'date' | 'platform'>('name');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  const [expandedDescriptions, setExpandedDescriptions] = useState<Set<string>>(new Set());

  const { mode, hasAccessToSite } = useAuthStore();
  const { 
    filteredAgents, 
    isLoading, 
    error, 
    loadAgents, 
    deleteAgent, 
    setFilters, 
    clearFilters 
  } = useAgentStore();

  useEffect(() => {
    loadAgents();
  }, [loadAgents]);

  useEffect(() => {
    setFilters({
      search: searchQuery
    });
  }, [searchQuery, setFilters]);

  const handleViewAgent = (agent: Agent) => {
    setSelectedAgent(agent);
    setShowAgentDetail(true);
  };

  const handleDeleteAgent = async (agent: Agent) => {
    if (window.confirm(`√ätes-vous s√ªr de vouloir supprimer l'agent ${agent.name} ?`)) {
      await deleteAgent(agent.id);
    }
  };

  const clearSearch = () => {
    setSearchQuery('');
    clearFilters();
  };

  const toggleDescription = (agentId: string) => {
    setExpandedDescriptions(prev => {
      const newSet = new Set(prev);
      if (newSet.has(agentId)) {
        newSet.delete(agentId);
      } else {
        newSet.add(agentId);
      }
      return newSet;
    });
  };

  const truncateText = (text: string, maxLength: number = 150) => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  };

  const sortedAgents = [...filteredAgents].sort((a, b) => {
    let comparison = 0;
    
    switch (sortBy) {
      case 'name':
        comparison = a.name.localeCompare(b.name);
        break;
      case 'date':
        comparison = new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();
        break;
      case 'platform':
        comparison = a.platform.localeCompare(b.platform);
        break;
      default:
        comparison = 0;
    }
    
    return sortOrder === 'asc' ? comparison : -comparison;
  });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  if (error) {
    return (
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center py-12 bg-red-50 rounded-xl border border-red-200"
      >
        <div className="text-red-600 font-semibold mb-4">Erreur: {error}</div>
        <button 
          onClick={loadAgents}
          className="btn-primary"
        >
          R√©essayer
        </button>
      </motion.div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Header avec animation ultra moderne */}
      <motion.div
        initial={{ opacity: 0, y: -30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8, ease: "easeOut" }}
        className="relative overflow-hidden rounded-3xl backdrop-blur-md border-0 shadow-lg"
        style={{
          background: 'linear-gradient(135deg, rgba(255,255,255,0.6) 0%, rgba(255,247,237,0.4) 50%, rgba(255,237,213,0.3) 100%)',
          boxShadow: '0 8px 32px rgba(0,0,0,0.08), inset 0 1px 0 rgba(255,255,255,0.8)'
        }}
      >
        {/* √âl√©ments de fond subtils pour int√©gration */}
        <div className="absolute inset-0 overflow-hidden rounded-3xl">
          <div className="absolute top-0 right-0 w-40 h-40 bg-gradient-to-br from-orange-100/30 to-transparent rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-32 h-32 bg-gradient-to-tr from-white/40 to-transparent rounded-full blur-2xl"></div>
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-48 h-48 bg-gradient-to-r from-orange-50/20 to-white/30 rounded-full blur-3xl"></div>
        </div>
        
        <div className="relative z-10 p-8">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6 mb-8">
            <div className="space-y-4" style={{ minHeight: '80px' }}>
              <motion.h1 
                initial={{ opacity: 0, x: -30 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.2, duration: 0.8 }}
                className="text-4xl font-black text-gray-800 tracking-tight"
                style={{
                  lineHeight: '1.4',
                  paddingTop: '8px',
                  paddingBottom: '8px',
                  minHeight: '60px',
                  display: 'flex',
                  alignItems: 'center'
                }}
              >
                Agents
              </motion.h1>
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.6, duration: 0.5 }}
                className="flex items-center space-x-3 text-sm font-semibold text-gray-500"
              >
                <div className="flex items-center space-x-1">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span>{filteredAgents.length} agents actifs</span>
                </div>
              </motion.div>
            </div>
            
            <motion.div 
              initial={{ opacity: 0, x: 30 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.5, duration: 0.8 }}
              className="flex items-center space-x-4"
            >
              {/* Toggle View Mode */}
              <div className="flex items-center space-x-1 bg-white/80 backdrop-blur-md rounded-xl p-1 border border-gray-200 shadow-md">
                <button
                  onClick={() => setViewMode('grid')}
                  className={`p-2 rounded-lg transition-all duration-300 ${
                    viewMode === 'grid' 
                      ? 'bg-gradient-to-r from-orange-500 to-orange-600 text-white shadow-md' 
                      : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Grid className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setViewMode('list')}
                  className={`p-2 rounded-lg transition-all duration-300 ${
                    viewMode === 'list' 
                      ? 'bg-gradient-to-r from-orange-500 to-orange-600 text-white shadow-md' 
                      : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <List className="w-4 h-4" />
                </button>
              </div>

              {/* Sort */}
              <div className="relative">
                <select
                  value={`${sortBy}-${sortOrder}`}
                  onChange={(e) => {
                    const [field, order] = e.target.value.split('-');
                    setSortBy(field as any);
                    setSortOrder(order as any);
                  }}
                  className="bg-white/80 backdrop-blur-md border border-gray-200 rounded-xl px-4 py-2 pr-10 text-gray-700 text-sm focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 shadow-sm"
                >
                  <option value="name-asc">Nom A-Z</option>
                  <option value="name-desc">Nom Z-A</option>
                  <option value="date-desc">Plus r√©cent</option>
                  <option value="date-asc">Plus ancien</option>
                  <option value="platform-asc">Plateforme A-Z</option>
                </select>
                <ArrowUpDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-500 pointer-events-none" />
              </div>

              {/* Create Agent Button */}
              {mode === 'admin' && onCreateAgent && (
                <motion.button
                  onClick={onCreateAgent}
                  className="flex items-center space-x-2 bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white font-semibold px-5 py-2.5 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Plus className="w-5 h-5" />
                  <span>Nouvel Agent</span>
                </motion.button>
              )}
            </motion.div>
          </div>

          {/* Recherche Intelligente */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="space-y-6"
          >
            {/* Barre de recherche am√©lior√©e */}
            <div className="relative">
              <div className="relative">
                <svg className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 z-10" fill="none" stroke="#000000" viewBox="0 0 24 24" strokeWidth={2.5}>
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.35-4.35"></path>
                </svg>
                <input
                  type="text"
                  placeholder="üîç Recherche intelligente : nom, services, description, langues, sp√©cialit√©s..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full rounded-2xl pl-12 pr-12 py-4 text-gray-700 placeholder-gray-500 focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 text-base"
                  style={{
                    background: 'linear-gradient(135deg, rgba(255,255,255,0.9), rgba(255,255,255,0.7))',
                    backdropFilter: 'blur(40px) saturate(200%)',
                    WebkitBackdropFilter: 'blur(40px) saturate(200%)',
                    border: '1px solid rgba(255,255,255,0.8)',
                    borderTop: '1px solid rgba(255,255,255,1)',
                    boxShadow: 'inset 0 1px 0 rgba(255,255,255,0.5), 0 4px 20px rgba(0,0,0,0.08)'
                  }}
                />
                {searchQuery && (
                  <button
                    onClick={() => setSearchQuery('')}
                    className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                  >
                    <X className="w-5 h-5" />
                  </button>
                )}
              </div>
              
              {/* Aide √† la recherche intelligente */}
              <motion.div 
                className="mt-4 p-4 rounded-xl"
                style={{
                  background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(99, 102, 241, 0.1))',
                  border: '1px solid rgba(59, 130, 246, 0.2)'
                }}
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0 mt-0.5">
                    <div className="w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                      <span className="text-white text-xs font-bold">üß†</span>
                    </div>
                  </div>
                  <div>
                    <h4 className="text-sm font-semibold text-gray-800 mb-2">
                      üí° Aide √† la Recherche Intelligente
                    </h4>
                    <p className="text-xs text-gray-600 mb-3">
                      Notre syst√®me trouve automatiquement ce que vous cherchez dans tous les champs :
                    </p>
                    <div className="grid grid-cols-2 gap-2 text-xs">
                      <div className="flex items-center space-x-2">
                        <span className="w-2 h-2 bg-orange-500 rounded-full"></span>
                        <span className="text-gray-700">Nom de l'agent</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                        <span className="text-gray-700">Services & √Ä propos</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                        <span className="text-gray-700">Sp√©cialit√©s</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="w-2 h-2 bg-purple-500 rounded-full"></span>
                        <span className="text-gray-700">Langues parl√©es</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="w-2 h-2 bg-red-500 rounded-full"></span>
                        <span className="text-gray-700">Contact & email</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="w-2 h-2 bg-yellow-500 rounded-full"></span>
                        <span className="text-gray-700">Site web</span>
                      </div>
                    </div>
                    <div className="mt-3 p-3 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg">
                      <p className="text-xs text-gray-600">
                        <strong>üí° Exemples :</strong> Tapez "mode", "anglais", "dropshipping", "cosm√©tiques", "electronique" - 
                        le syst√®me trouve automatiquement dans les descriptions compl√®tes !
                      </p>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>

      {/* Agent List/Grid */}
      {sortedAgents.length === 0 ? (
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, ease: "easeOut" }}
          className="text-center py-12 backdrop-blur-md rounded-2xl border-0 shadow-lg"
          style={{
            background: 'linear-gradient(135deg, rgba(255,255,255,0.6) 0%, rgba(255,247,237,0.4) 50%, rgba(255,237,213,0.3) 100%)',
            boxShadow: '0 8px 32px rgba(0,0,0,0.08), inset 0 1px 0 rgba(255,255,255,0.8)'
          }}
        >
          {/* √âl√©ments de fond subtils pour int√©gration */}
          <div className="absolute inset-0 overflow-hidden rounded-2xl">
            <div className="absolute top-0 left-1/2 transform -translate-x-1/2 w-24 h-24 bg-gradient-to-b from-orange-100/25 to-transparent rounded-full blur-xl"></div>
            <div className="absolute bottom-0 right-0 w-20 h-20 bg-gradient-to-tl from-white/30 to-transparent rounded-full blur-xl"></div>
          </div>
          
          <div className="relative z-10">
            <div className="flex justify-center mb-4">
              <svg className="w-16 h-16" fill="none" stroke="#000000" viewBox="0 0 24 24" strokeWidth={1.5}>
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
            </div>
            <h3 className="text-xl font-semibold text-gray-800 mb-2">
              Aucun r√©sultat pour cette recherche
            </h3>
            <p className="text-gray-600 mb-6">
              Essayez de modifier vos crit√®res de recherche ou ajoutez un nouvel agent.
            </p>
            {searchQuery ? (
              <motion.button 
                onClick={clearSearch} 
                className="bg-orange-500 hover:bg-orange-600 text-white font-medium px-6 py-2 rounded-lg transition-colors duration-200"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                Effacer la recherche
              </motion.button>
            ) : null}
          </div>
        </motion.div>
      ) : (
        <div className={`
          ${viewMode === 'grid' 
            ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' 
            : 'space-y-4'
          }
        `}>
          <AnimatePresence>
            {sortedAgents.map((agent, index) => (
              <motion.div
                key={agent.id}
                initial={{ opacity: 0, y: 30, scale: 0.9 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8, y: -20 }}
                transition={{ 
                  delay: index * 0.08,
                  duration: 0.6,
                  ease: 'easeOut'
                }}
                className={`
                  relative overflow-hidden rounded-2xl group cursor-pointer
                  ${viewMode === 'list' 
                    ? 'flex items-center space-x-6 p-6' 
                    : 'p-8'
                  }
                `}
                style={{
                  background: 'linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,250,252,0.9) 100%)',
                  backdropFilter: 'blur(20px)',
                  border: '1px solid rgba(255,255,255,0.2)',
                  boxShadow: '0 8px 32px rgba(0,0,0,0.1)'
                }}
                whileHover={{ 
                  y: -8, 
                  scale: 1.03,
                  boxShadow: '0 20px 60px rgba(0,0,0,0.15)',
                  transition: { duration: 0.3, ease: 'easeOut' }
                }}
              >
                {/* Background gradient d√©coratif */}
                <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                  <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-orange-200/30 to-transparent rounded-full blur-2xl"></div>
                  <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-blue-200/30 to-transparent rounded-full blur-2xl"></div>
                </div>
                
                {/* Agent Avatar am√©lior√© */}
                <div className={`
                  relative ${viewMode === 'list' ? 'flex-shrink-0' : 'mb-6'} z-10
                `}>
                  <motion.div 
                    className="w-20 h-20 bg-gradient-to-br from-orange-400 via-pink-500 to-purple-600 rounded-2xl flex items-center justify-center text-white font-black text-2xl shadow-2xl"
                    whileHover={{ 
                      rotate: [0, -5, 5, -5, 0],
                      scale: 1.1
                    }}
                    transition={{ duration: 0.5 }}
                    style={{
                      backgroundSize: '200% 200%',
                      animation: 'gradientShift 4s ease-in-out infinite'
                    }}
                  >
                    {agent.name.charAt(0).toUpperCase()}
                  </motion.div>
                </div>

                {/* Agent Info am√©lior√© */}
                <div className={`${viewMode === 'list' ? 'flex-1' : ''} relative z-10`}>
                  <div className="flex items-start justify-between mb-4">
                    <div className="space-y-2">
                      <motion.h3 
                        className="text-xl font-bold text-gray-800 leading-tight"
                        whileHover={{ scale: 1.02 }}
                      >
                        {agent.name}
                      </motion.h3>
                    </div>
                    
                    {mode === 'admin' && (
                      <div className="flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                        <button
                          onClick={() => onEditAgent?.(agent)}
                          className="p-2 hover:bg-blue-100 rounded-lg transition-colors"
                          title="Modifier"
                        >
                          <Edit className="w-4 h-4 text-blue-600" />
                        </button>
                        <button
                          onClick={() => handleDeleteAgent(agent)}
                          className="p-2 hover:bg-red-100 rounded-lg transition-colors"
                          title="Supprimer"
                        >
                          <Trash2 className="w-4 h-4 text-red-600" />
                        </button>
                      </div>
                    )}
                  </div>

                  {/* Plateformes - N'AFFICHER QUE SI VRAIMENT RENSEIGN√âES */}
                  <div className="space-y-2 mb-3">
                    {/* Plateformes - Afficher SEULEMENT les vraies plateformes (pas les valeurs par d√©faut) */}
                    {agent.platforms && agent.platforms.length > 0 && agent.platforms.some(p => p && p !== '' && p !== 'whatsapp') && (
                      <div>
                        <div className="text-xs font-medium text-gray-500 mb-1">üåê Plateformes</div>
                        <ScrollingTags 
                          items={agent.platforms
                            .filter(p => p && p !== '' && p !== 'whatsapp')
                            .map(p => `${platformIcons[p] || 'üì±'} ${p}`)
                          }
                          maxVisible={2}
                          tagClassName="px-2 py-1 bg-gradient-to-r from-orange-400 to-orange-500 text-white text-xs rounded-lg font-medium"
                          speed={2.5}
                          pauseOnHover={true}
                        />
                      </div>
                    )}
                    
                  </div>

                  {/* Description et √Ä propos simplifi√©es */}
                  {(agent.notes || agent.about) && (
                    <motion.div 
                      className="mb-3 p-3 bg-gray-50 rounded-lg border border-gray-100"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 0.3 }}
                    >
                      {agent.notes && (
                        <div className="mb-2">
                          <p className="text-gray-600 text-sm leading-relaxed">
                            {expandedDescriptions.has(agent.id) 
                              ? agent.notes 
                              : truncateText(agent.notes, 100)
                            }
                            {agent.notes.length > 100 && (
                              <button
                                onClick={() => toggleDescription(agent.id)}
                                className="ml-1 text-orange-600 hover:text-orange-700 text-xs font-medium"
                              >
                                {expandedDescriptions.has(agent.id) ? ' moins' : ' plus'}
                              </button>
                            )}
                          </p>
                        </div>
                      )}
                      {agent.about && (
                        <div>
                          <p className="text-gray-600 text-sm leading-relaxed">
                            {expandedDescriptions.has(agent.id + '-about') 
                              ? agent.about 
                              : truncateText(agent.about, 120)
                            }
                            {agent.about.length > 120 && (
                              <button
                                onClick={() => {
                                  const key = agent.id + '-about';
                                  setExpandedDescriptions(prev => {
                                    const newSet = new Set(prev);
                                    if (newSet.has(key)) {
                                      newSet.delete(key);
                                    } else {
                                      newSet.add(key);
                                    }
                                    return newSet;
                                  });
                                }}
                                className="ml-1 text-orange-600 hover:text-orange-700 text-xs font-medium"
                              >
                                {expandedDescriptions.has(agent.id + '-about') ? ' moins' : ' plus'}
                              </button>
                            )}
                          </p>
                        </div>
                      )}
                    </motion.div>
                  )}

                  {/* Sp√©cialit√©s et Langues avec animation */}
                  {((agent.specialties && agent.specialties.length > 0) || (agent.languages && agent.languages.length > 0)) && (
                    <motion.div 
                      className="mb-3 space-y-2"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 0.3, delay: 0.1 }}
                    >
                      {agent.specialties && agent.specialties.length > 0 && (
                        <div>
                          <div className="text-xs font-medium text-gray-500 mb-1">üéØ Sp√©cialit√©s</div>
                          <ScrollingTags 
                            items={agent.specialties}
                            maxVisible={2}
                            tagClassName="px-2 py-1 bg-gradient-to-r from-purple-400 to-purple-500 text-white text-xs rounded-lg font-medium"
                            speed={2}
                            pauseOnHover={true}
                          />
                        </div>
                      )}
                      
                      {agent.languages && agent.languages.length > 0 && (
                        <div>
                          <div className="text-xs font-medium text-gray-500 mb-1">üåç Langues</div>
                          <ScrollingTags 
                            items={agent.languages}
                            maxVisible={2}
                            tagClassName="px-2 py-1 bg-gradient-to-r from-green-400 to-green-500 text-white text-xs rounded-lg font-medium"
                            speed={2.5}
                            pauseOnHover={true}
                          />
                        </div>
                      )}
                    </motion.div>
                  )}


                  {/* Contact Actions simplifi√©es */}
                  <div className="flex items-center justify-between pt-3 border-t border-gray-100">
                    <div className="flex items-center space-x-2">
                      {agent.phoneNumber && (
                        <a
                          href={`tel:${agent.phoneNumber}`}
                          className="p-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors border border-green-200"
                        >
                          <Phone className="w-4 h-4" />
                        </a>
                      )}
                      {agent.email && (
                        <a
                          href={`mailto:${agent.email}`}
                          className="p-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors border border-blue-200"
                        >
                          <MessageCircle className="w-4 h-4" />
                        </a>
                      )}
                    </div>

                    <button
                      onClick={() => handleViewAgent(agent)}
                      className="flex items-center space-x-1 px-3 py-1.5 bg-orange-100 text-orange-700 rounded-lg hover:bg-orange-200 transition-colors text-sm font-medium border border-orange-200"
                    >
                      <Eye className="w-4 h-4" />
                      <span>Voir</span>
                    </button>
                  </div>
                </div>
              </motion.div>
            ))}
          </AnimatePresence>
        </div>
      )}
      </motion.div>

      {/* Agent Detail Modal */}
      <AnimatePresence>
        {showAgentDetail && selectedAgent && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="glass-card max-w-2xl w-full max-h-[90vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-2xl font-bold text-white">D√©tails de l'agent</h2>
                  <button
                    onClick={() => setShowAgentDetail(false)}
                    className="p-2 hover:bg-dark-600 rounded-lg transition-colors"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>

                {/* Agent Details Content */}
                <div className="space-y-6">
                  <div className="flex items-center space-x-4">
                    <div className="w-20 h-20 bg-gradient-primary rounded-xl flex items-center justify-center text-white font-bold text-2xl">
                      {selectedAgent.name.charAt(0).toUpperCase()}
                    </div>
                    <div>
                      <h3 className="text-xl font-semibold text-white">{selectedAgent.name}</h3>
                      <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium border mt-2 ${statusColors[selectedAgent.status]}`}>
                        {selectedAgent.status}
                      </span>
                    </div>
                  </div>

                  {selectedAgent.about && (
                    <div>
                      <h4 className="text-lg font-semibold text-white mb-2">√Ä propos</h4>
                      <div className="text-dark-300 leading-relaxed">
                        <ExpandableText 
                          text={selectedAgent.about} 
                          maxLength={150}
                          className="text-dark-300 leading-relaxed"
                        />
                      </div>
                    </div>
                  )}

                  {selectedAgent.description && (
                    <div>
                      <h4 className="text-lg font-semibold text-white mb-2">Description</h4>
                      <p className="text-dark-300 leading-relaxed">{selectedAgent.description}</p>
                    </div>
                  )}

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="text-lg font-semibold text-white mb-3">Informations</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-dark-300">Plateforme:</span>
                          <span className="text-white">{platformIcons[selectedAgent.platform]} {selectedAgent.platform}</span>
                        </div>
                        {selectedAgent.location && (
                          <div className="flex justify-between">
                            <span className="text-dark-300">Localisation:</span>
                            <span className="text-white">{selectedAgent.location}</span>
                          </div>
                        )}
                      </div>
                    </div>

                    <div>
                      <h4 className="text-lg font-semibold text-white mb-3">Contact</h4>
                      <div className="space-y-2">
                        {selectedAgent.phoneNumber && (
                          <div className="flex justify-between">
                            <span className="text-dark-300">T√©l√©phone:</span>
                            <a href={`tel:${selectedAgent.phoneNumber}`} className="text-primary-400 hover:text-primary-300">
                              {selectedAgent.phoneNumber}
                            </a>
                          </div>
                        )}
                        {(selectedAgent.email || selectedAgent.contactInfo?.email) && (
                          <div className="flex justify-between">
                            <span className="text-dark-300">Email:</span>
                            <a href={`mailto:${selectedAgent.email || selectedAgent.contactInfo?.email}`} className="text-primary-400 hover:text-primary-300">
                              {selectedAgent.email || selectedAgent.contactInfo?.email}
                            </a>
                          </div>
                        )}
                        {selectedAgent.contactInfo?.websiteUrl && (
                          <div className="flex justify-between">
                            <span className="text-dark-300">Site web:</span>
                            <a href={selectedAgent.contactInfo.websiteUrl} target="_blank" rel="noopener noreferrer" className="text-primary-400 hover:text-primary-300">
                              {selectedAgent.contactInfo.websiteUrl}
                            </a>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>


                  {selectedAgent.specialties && selectedAgent.specialties.length > 0 && (
                    <div>
                      <h4 className="text-lg font-semibold text-white mb-3">Sp√©cialit√©s</h4>
                      <ScrollingTags 
                        items={selectedAgent.specialties}
                        maxVisible={3}
                        tagClassName="px-3 py-1 bg-purple-600/20 text-purple-300 rounded-lg border border-purple-600/30 font-medium"
                        speed={2.5}
                        pauseOnHover={true}
                      />
                    </div>
                  )}

                  {selectedAgent.languages && selectedAgent.languages.length > 0 && (
                    <div>
                      <h4 className="text-lg font-semibold text-white mb-3">Langues</h4>
                      <ScrollingTags 
                        items={selectedAgent.languages}
                        maxVisible={4}
                        tagClassName="px-3 py-1 bg-green-600/20 text-green-300 rounded-lg border border-green-600/30 font-medium"
                        speed={3}
                        pauseOnHover={true}
                      />
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
    </div>
  );
};